# -*- coding: utf-8 -*-


from settings import *


class OutputFormAge(StatesGroup):
    Output = State()


class OutputFormImage(StatesGroup):
    Output = State()


class OutputFormName(StatesGroup):
    Output = State()


class OutputFormCity(StatesGroup):
    Output = State()


class OutputFormDescription(StatesGroup):
    Output = State()


class OutputFormGetUser(StatesGroup):
    Output = State()


class OutputFormMessage(StatesGroup):
    Output = State()


button1 = KeyboardButton('–Ø –ø–∞—Ä–µ–Ω—å', callback_data='man')
button2 = KeyboardButton('–Ø –¥–µ–≤—É—à–∫–∞', callback_data='girl')
button3 = KeyboardButton('–î–µ–≤—É—à–∫–∏', callback_data='girls')
button4 = KeyboardButton('–ü–∞—Ä–Ω–∏', callback_data='men')

button5 = KeyboardButton('üëé')
button6 = KeyboardButton('‚ù§Ô∏è')
button7 = KeyboardButton('—Å—Ç–æ–ø')

button8 = KeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Äüíú')
button9 = KeyboardButton('–ê–Ω–∫–µ—Ç–∞‚ù§Ô∏è')
button10 = KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà')

sex = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True).add(
    button1, button2
)

sex_ = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True).add(
    button3, button4
)

menu_choose = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
    button5, button6, button7
)

menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
    button8, button9, button10
)

bot = Bot(token=KEY_BOT)
dp = Dispatcher(bot, storage=MemoryStorage())


def create_fidback_ford(telegram_id):
    like = InlineKeyboardButton(text='‚ù§Ô∏è', callback_data=f'btn_{telegram_id}')
    fidback_bar = InlineKeyboardMarkup(row_width=1)
    fidback_bar.insert(like)
    return fidback_bar


@dp.message_handler(commands=['start'])
async def register_point(message):
    await bot.send_message(message.from_user.id, """–£–∂–µ –º–∏–ª–ª–∏–æ–Ω—ã –ª—é–¥–µ–π –∑–Ω–∞–∫–æ–º—è—Ç—Å—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ üòç\n\n
                                                –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∑–µ–π üë´"""
                           )
    if db.get_user(str(message.from_user.id)) is None:
        db.register_new_user(message.from_user.id, message.from_user.username)
        await bot.send_message(message.from_user.id, "–û–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º", reply_markup=sex)
    else:
        await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!", reply_markup=menu)


@dp.message_handler(commands=['send_message'])
async def send_message(message):
    user = db.get_user(message.from_user.id)
    if user['status'] == 'Admin':
        await bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        await OutputFormMessage.Output.set()


@dp.message_handler(commands=['get_user'])
async def get_user(message):
    user = db.get_user(message.from_user.id)
    if user['status'] == 'Admin':
        await bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await OutputFormGetUser.Output.set()


async def send_from_user(id_user):
    found_user = db.get_user(db.get_pair(id_user))
    if not found_user:
        await bot.send_message(id_user, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ!")
    else:
        try:
            await bot.send_photo(id_user, open(found_user['photo'], 'rb'),
                                 caption=f"–ò–º—è: {found_user['name']}\n–ü–æ–ª: {found_user['sex']}"
                                         f"\n–í–æ–∑—Ä–∞—Å—Ç: {found_user['age']}\n–ì–æ—Ä–æ–¥: {found_user['city']}"
                                         f"\n–û —Å–µ–±–µ: {found_user['description']}")
            db.increment_row(found_user['id'], 'views')
        except Exception:
            await send_from_user(id_user)


@dp.message_handler(content_types=['text'])
async def get_text_massage(message: types.Message):
    if message.text == '–Ø –ø–∞—Ä–µ–Ω—å':
        db.set_value(message.from_user.id, 'sex', '–ü–∞—Ä–µ–Ω—å')
        await bot.send_message(message.from_user.id, "–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", reply_markup=sex_)
    elif message.text == '–Ø –¥–µ–≤—É—à–∫–∞':
        db.set_value(message.from_user.id, 'sex', '–î–µ–≤—É—à–∫–∞')
        await bot.send_message(message.from_user.id, "–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", reply_markup=sex_)
    elif message.text == 'üëé':
        db.off_active_seek(message.from_user.id)
        await send_from_user(message.from_user.id)
    elif message.text == '–ê–Ω–∫–µ—Ç–∞‚ù§Ô∏è':
        user = db.get_user(message.from_user.id)
        if user['status'] == 'User' or user['status'] == 'Admin':
            await bot.send_photo(message.from_user.id, open(user['photo'], 'rb'),
                                 caption=f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n–ò–º—è: {user['name']}\n–ü–æ–ª: {user['sex']}"
                                         f"\n–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç: {user['interesting']}\n"
                                         f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
                                         f"\n–û —Å–µ–±–µ: {user['description']}")
    elif message.text == '—Å—Ç–æ–ø':
        user = db.get_user(message.from_user.id)
        if user['status'] == 'User' or user['status'] == 'Admin':
            await bot.send_message(message.from_user.id, '–£–¥–∞—á–∏ ‚ù§Ô∏è', reply_markup=menu)
    elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà':
        user = db.get_user(message.from_user.id)
        if user['status'] == 'User' or user['status'] == 'Admin':
            await bot.send_message(message.from_user.id, f"–°–¢–ê–¢–ò–°–¢–ò–ö–êüìà\n\n\n"
                                                         f"–õ–∞–π–∫–æ–≤ –Ω–∞ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ: {user['like']}\n"
                                                         f"–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã: {user['views']}\n"
                                                         f"–í–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤: {user['mutual']}\n", reply_markup=menu)
    elif message.text == '–î–µ–≤—É—à–∫–∏':
        db.set_value(message.from_user.id, 'interesting', '–î–µ–≤—É—à–∫–∏')
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        await OutputFormAge.Output.set()
    elif message.text == '–ü–∞—Ä–Ω–∏':
        db.set_value(message.from_user.id, 'interesting', '–ü–∞—Ä–Ω–∏')
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        await OutputFormAge.Output.set()
    elif message.text == '–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Äüíú':
        user = db.get_user(message.from_user.id)
        if user['status'] == 'User' or user['status'] == 'Admin':
            await bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ!\n\n"
                                                         "–ù–∞–∂–º–∏ 'üëé', –µ—Å–ª–∏ —Ç–µ–±–µ –∫—Ç–æ —Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è\n"
                                                         "–ù–∞–∂–º–∏ '‚ù§Ô∏è', —á—Ç–æ–± –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫\n",
                                   reply_markup=menu_choose)
            await send_from_user(message.from_user.id)
    elif message.text == '‚ù§Ô∏è':
        user = db.get_user(message.from_user.id)
        if user['status'] == 'User' or user['status'] == 'Admin':
            id_found_user = db.get_active_seek(message.from_user.id)
            await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ!\n–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!‚ù§Ô∏è')
            await bot.send_photo(id_found_user, open(user['photo'], 'rb'),
                                 caption=f"–ò–º—è: {user['name']}\n–ü–æ–ª: {user['sex']}"
                                         f"\n–í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n–ì–æ—Ä–æ–¥: {user['city']}"
                                         f"\n–û —Å–µ–±–µ: {user['description']}",
                                 reply_markup=create_fidback_ford(message.from_user.id))
            print(f"{message.from_user.id} –ª–∞–π–∫–Ω—É–ª–∞ {id_found_user}")
            await bot.send_message(int(db.get_id_admin()), f"{message.from_user.id} –ª–∞–π–∫–Ω—É–ª–∞ {id_found_user}")
            await send_from_user(message.from_user.id)
            db.increment_row(id_found_user, 'views')
            db.increment_row(id_found_user, 'like')
            db.like_active_seek(message.from_user.id)
        await send_from_user(message.from_user.id)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
async def fidback(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    found_user = db.get_user(int(callback_query.data.replace('btn_', '')))
    await bot.send_photo(callback_query.from_user.id, open(found_user['photo'], 'rb'),
                         caption=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n\n"
                                 f"–¢–µ–ª–µ–≥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{found_user['login']}\n")
    simple_user = db.get_user(callback_query.from_user.id)
    await bot.send_photo(int(callback_query.data.replace('btn_', '')), open(simple_user['photo'], 'rb'),
                         caption=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n\n"
                                 f"–¢–µ–ª–µ–≥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{simple_user['login']}\n")
    db.ok_active_seek(simple_user['id'], found_user['id'])
    db.increment_row(int(callback_query.data.replace('btn_', '')), 'mutual')
    db.increment_row(callback_query.from_user.id, 'mutual')
    print(f"{callback_query.from_user.id} –≤–∑–∞–∏–º–Ω–æ –ª–∞–π–∫–Ω—É–ª–∞ {int(callback_query.data.replace('btn_', ''))}")
    await bot.send_message(int(db.get_id_admin()), f"{callback_query.from_user.id} –≤–∑–∞–∏–º–Ω–æ –ª–∞–π–∫–Ω—É–ª–∞"
                                                   f" {int(callback_query.data.replace('btn_', ''))}")


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(state=OutputFormAge.Output)
async def process_age(message: types.Message, state: FSMContext):
    Output = message.text
    db.set_value(message.from_user.id, 'age', Output)
    await state.finish()
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
    await OutputFormName.Output.set()


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(state=OutputFormName.Output)
async def process_name(message: types.Message, state: FSMContext):
    Output = message.text
    db.set_value(message.from_user.id, 'name', Output)
    await state.finish()
    await bot.send_message(message.from_user.id, "–û—Ç–∫—É–¥–∞ –≤—ã?")
    await OutputFormCity.Output.set()


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(state=OutputFormCity.Output)
async def process_name(message: types.Message, state: FSMContext):
    Output = message.text
    db.set_value(message.from_user.id, 'city', Output)
    await state.finish()
    await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ.\n"
                                                 "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –±–ª–∏–∑–∫–æ–≥–æ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º")
    await OutputFormDescription.Output.set()


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(state=OutputFormDescription.Output)
async def process_name(message: types.Message, state: FSMContext):
    Output = message.text
    db.set_value(message.from_user.id, 'description', Output)
    await state.finish()
    await bot.send_message(message.from_user.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
    await OutputFormImage.Output.set()


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(state=OutputFormGetUser.Output)
async def process_name(message: types.Message, state: FSMContext):
    Output = message.text
    user = db.get_user(int(Output))
    await bot.send_photo(message.from_user.id, open(user['photo'], 'rb'),
                         caption=f"'id': {user['id']}\n"
                                 f"'login': {user['login']}\n"
                                 f"'description': {user['description']}\n"
                                 f"'views': {user['views']}\n"
                                 f"'city': {user['city']}\n"
                                 f"'photo': {user['photo']}\n"
                                 f"'mutual': {user['mutual']}\n"
                                 f"'sex': {user['sex']}\n"
                                 f"'age': {user['age']}\n"
                                 f"'interesting': {user['interesting']}\n"
                                 f"'name': {user['name']}\n"
                                 f"'id': {user['status']}\n"
                         )
    await state.finish()


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(state=OutputFormMessage.Output)
async def process_name(message: types.Message, state: FSMContext):
    Output = message.text
    for x in db.get_all_user():
        try:
            await bot.send_message(x, str(Output))
        except Exception:
            continue

    await state.finish()

@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(state=OutputFormImage.Output, content_types=['photo'])
async def process_img(message, state: FSMContext):
    try:
        file_info = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        src = filepath + f'{message.from_user.id}.png'
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file.getvalue())
        await bot.send_message(message.from_user.id, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        db.set_value(message.from_user.id, 'photo', src)
        db.set_value(message.from_user.id, 'status', "User")
        await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–ø–∞—Å–∏–±–æ!\n"
                                                     "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ê–Ω–∫–µ—Ç–∞' ",
                               reply_markup=menu)
        await state.finish()
        await bot.send_message(int(db.get_id_admin()), f'successfull register {message.from_user.id}')
        user = db.get_user(message.from_user.id)
        await bot.send_photo(int(db.get_id_admin()), open(user['photo'], 'rb'),
                             caption=f"'id': {user['id']}\n"
                                     f"'login': {user['login']}\n"
                                     f"'description': {user['description']}\n"
                                     f"'views': {user['views']}\n"
                                     f"'city': {user['city']}\n"
                                     f"'photo': {user['photo']}\n"
                                     f"'mutual': {user['mutual']}\n"
                                     f"'sex': {user['sex']}\n"
                                     f"'age': {user['age']}\n"
                                     f"'interesting': {user['interesting']}\n"
                                     f"'name': {user['name']}\n"
                                     f"'id': {user['status']}\n"
                             )
    except telebot.apihelper.ApiException as e:
        await bot.send_message(message.from_user.id, e)
        await state.finish()
